Assignment_4
============

Modification of a basic strategy game with the use of pygame. 

Things to do for part A of the assignment:
Add at least one method (more if necessary) in the new unit class, this is in addition to __init__. It hsould implement some functionality that is unique to your new unit type.
Overload at least one method (in addition to __init__) from BaseUnit in at least one of your specific units.
All units and methods should be testable by simply playing the game.
Generally, your additions should be different form the current units in some fundamental way (not just a copy/paste + new picture).

Concepts of units to add:
**IMMOBILE UNIT**
No movement.
Non-traditional handling of action movements.
Larger range.

Sub-units:
**FACTORY**
Generates a unit (perhaps footman) every day, at the beginning of their turn.
Has no personal attack.
High health / poor resistance. Will be destroyed by anti-armor easily, but smaller units will have difficulty trying to destroy it.
Infinite resources, in terms of fuel. Does not use fuel system.
Placed in the front of the area.

**FOOTMEN**
Generated by the factory.
Can be based on another unit already in the program - perhaps a jeep.
Much weaker than traditional jeep, in terms of resistances. However, damage is retained.
Symbolised by a star, if it is based on the same unit build. 
If it is a footman, use spritesheet from Advance Wars.
Low movement, can go through anything (except for water) with no impairment.

**MISSILE SILO**
Immobile unit.
Standard unit. High range, high attack.
If it attacks, it cannot attack for another turn. Prevents immobile defense against swarming.
Low defenses, weak to counterattack if left alone. 
Provides a 'defense' structure to the game.
Use reference sprite from Advance Wars.

New method:
Actions completed at new day iteration. For the factory, the new day provides a new footman, provided that there [b] are no units that are currently placed on top of the building [/b]. Also provides a new design in that units can go over the sprite - affects the sprite (must reduce muddling).

Overload a method:
http://stackoverflow.com/questions/10202938/how-do-i-use-method-overloading-in-python
Overload method will eventually rise with new day system.

